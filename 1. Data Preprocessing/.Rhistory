my_data <- sample(c(y, z), 100)
is.na(my_data)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_na
my_data
0\0
0/0
Inf - Inf
x <- 4L
class(x)
x <- c(4, "a", TRUE)
class(x)
x <- list(2, "a", "b", TRUE)
x[[1]]
a = x[[1]]
class(a)
getwd()
cd R
ls()
hw1_data <- read.csv("~/R/hw1_data.csv")
View(hw1_data)
hw1_data
colnames(hw1_data)
data <- hw1_data
data
data(1:2,)
data(1:2)
hw1_data(2)
hw1_data[1:2]
hw1_data[1:2,]
hw1_data[1:2,]
rowsum(hw1_data)
rowsum(hw1_data)
rowSums(hw1_data)
row(hw1_data)
hw1_data[-1:-2,]
hw1_data[-1:,]
hw1_data[-1:-2,]
hw1_data[47]$Ozone
hw1_data[Ozone]$Ozone
hw1_data[Ozone]
hw1_data["Ozone"]
hw1_data[47, "Ozone"]
is.na(hw1_data["Ozone"])
sum(is.na(hw1_data["Ozone"]))
mean(is.na(hw1_data["Ozone"]))
mean(hw1_data(is.na(hw1_data["Ozone"])))
mean(hw1_data[is.na(hw1_data["Ozone"])])
mean(hw1_data)
mean(hw1_data["Ozone"])
mean(hw1_data["Ozone", !is.na("Ozone")])
mean(hw1_data[32:60, "Temp"])
class(x <- 4)
class(x <- c(4, TRUE)
csc
class(x <- c(4, TRUE))
x <- list(2, "a", "b", TRUE)
x[[1]]
swirl()
library(swirl)
swirl()
x
x[1:10]
x[is.na(x)]
x[!is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x>0]
x[c(3,5,6)]
x[c(3,5,7)]
x[0]
x[3000]
x[!c(2,10)]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo = 11, bar = 2, nporf = NA)
vect <- c(foo = 11, bar = 2, norf = NA)
vvect
vect
names(vect)
vect <- c(11, 2,NA)
vect <- c(11, 2, NA)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
vect
vect2
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- c(1:20)
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- matric(1:20, nrow=4, ncol=5)
my_matrix2 <- matrix(1:20, nrow = 4, ncol = 5)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my)
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data, cnames)
colnames(my_data)
rownames(my_data)
colnames(my_data)
colnames(my_data) <- cnames
my_data
swirl()
exit
dcdd
close()
a <- rnorm
a
a <- rnorm(10)
a
a
rnorm(10)
rnorm(10)
rnorm(10)
rnorm(10)
rnorm(10)
library(swirl)
swirl()
swirl()
a <- matrix(c(1:10), c(11:20))
a <- matrix(c(1:10), c(10:20))
a
a <- matrix(c(1:10), c(10:20), c(20, 30))
a
a <- matrix(row(c(1:10)))
a <- matrix(c(1:10), nrow = 2)
a
a[,2]
a[2,]
a[2:]
a[2,:]
swirl()
if  1 == 1 :
print(TRUE)
TRUE == TRUE
FALSE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
!(5 == 7)
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6>4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
sample(6)
ints> 5
which(ints(>7))
which(ints > 7)
any(ints < 0)
all(ints > 0)
Sys.Date()
mean(c(2, 4, 5))
submit()
boring_function('My first function!')
boring_function
submit()
my_mean(c(4, 5, 6))
my_mean(c(4, 5, 10))
submit()
submit()
remainder(5)
remainder(11, 5)
remainder(divisor = 11, num =
| 5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
my_mean(c(4, 5, 10))
submit()
submit()
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x) {v[1]}, v = c(8, 4, 0))
evaluate(function(x) {x[1]}, x= c(8, 4, 0))
evaluate(function(x) {x[1]}, c(8, 4, 0))
evaluate(function(x) {x[-1]}, c(8, 4, 0))
?paste
paste("Programming", "is", "fun!")
submit()
telegram("Fuck you")
madlibs()
mad_libs()
submit()
mad_libs(... = "adascs)
mad_libs(... = "ada")
mad_libs(place = "fceasfc", adjective = "vdsfvds", noun = "wdwsdc")
skip()
%p%
paste('I', 'love', 'R!')
skip()
swirl()
library(swirl)
submit()
swirl()
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
t2
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
skip()
t3: "October 17, 1986 08:24"
t3 <- "October 17, 1986 08:24"
skip()
t4
class(t1)
class(t4)
skip()
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
x <- 1:10
if(x > 5) {
x <- 0
}
x <- 1:10
if(6 > 5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
z <- 10
f(3)
a = function (a) {}
a = function (a) {
return a + a
}
a = function (a) {
return (a + a)
}
a(3)
library(datasets)
data(iris)
?iris
?mtcars
head(iris)
head(iris$Sepal.Length)
iris["virginica"]
iris(row.names(x = "virginica"))
iris[rownames("virginica")]
iris[species = "virginica"]
row.names(iris)
colnames(iris)
rownames(iris)
colnames(iris)
iris$Species
iris$Species = "virginica"
iris$Sepal.Length
library(data.table)
install.packages("data.table")
library(data.table)
?data.table
iris_dt <- data.table(iris)
head(iris_dt)
iris_dt1 <- as.data.table(iris)
head(iris_dt1)
iris_dt[Species == "virginica",round(mean(Sepal.Length)) ]
iris_dt <= iris_dt1
iris_dt <- iris_dt1
iris_dt[Species == "virginica",round(mean(Sepal.Length)) ]
iris_dt <- as.data.table(iris)
iris_dt[Species == "virginica",round(mean(Sepal.Length)) ]
iris_dt[Species == "virginica", mean(Sepal.Length) ]
library(data.table)
iris_dt <- as.data.table(iris)
iris_dt[Species == "virginica",round(mean(Sepal.Length)) ]
library(datasets)
data(mtcars)
split(mtcars, mtcars$cyl)
split(mtcars, mtcars$cyl)
head(mtcars)
head(split(mtcars, mtcars$cyl))
head(split(iris, iris$Sepal.Length))
head(split(iris$Species, iris$Sepal.Length))
head(split(iris$Sepal.Length, iris$Species))
mean(split(iris$Sepal.Length, iris$Species)))
mean(split(iris$Sepal.Length, iris$Species))
class(split(iris$Sepal.Length, iris$Species))
head(split(iris$Sepal.Length, iris$Species))
head(split(iris$Sepal.Length, iris$Species))
split(iris$Sepal.Length, iris$Species)
a = split(iris$Sepal.Length, iris$Species)
mean(a)
a
sapply(a, mean)
colSums(iris)
iris(colSums())
summary(iris)
col(iris)
sum(col(iris))
col(iris)
row(iris)
head(iris)
split(iris$Sepal.Length, iris$Species = "virginica")
library(data.table)
iris_dt <- as.data.table(iris)
iris_dt[Species == "virginica",round(mean(Sepal.Length)) ]
head(mtcars)
mtcars1 <- data.table(mtcars)
head(mtcars1)
mtcars1[cyl = 6, mean(hp)]
mtcars1[cyl = '6' , mean(hp)]
library(data.table)
iris_dt <- as.data.table(iris)
iris_dt[Species == "virginica",round(mean(Sepal.Length)) ]
mtcars1[cyl == '6' , mean(hp)]
a = mtcars1[cyl == '6' , mean(hp)]
b = mtcars1[cyl == '4' , mean(hp)]
abs(a - b)
a = mtcars1[cyl == '8' , mean(hp)]
b = mtcars1[cyl == '4' , mean(hp)]
abs(a - b)
debug(ls)
ls()
library(data.table)
iris_dt <- as.data.table(iris)
iris_dt[Species == "virginica",round(mean(Sepal.Length)) ]
split(mtcars, mtcars$cyl)
split(mtcars, mtcars$cyl)
tapply(mtcars$cyl, mtcars$mpg, mean)
with(mtcars, tapply(mpg, cyl, mean))
tapply(mtcars$mpg, mtcars$cyl, mean)
mean(mtcars$mpg, mtcars$cyl)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
head(split(mtcars$mpg, mtcars$cyl))
c
head
exit
4 + 5
library(auto)
library(ISLR)
library(islr)
??islr
auto
install.packages("ISLR")
library(ISLR)
auto
??ISLR
Auto
head(Auto)
pairs(Auto)
names(Auto)
col(Auto)
head(col(Auto))
Auto[1:8]
head(Auto[1:8])
cor(Auto[1:8])
cor(Auto[1:9])
cor(Auto[1:8])
fit2 <- lm(mpg ~ . - name, data = Auto)
summary(fit2)
par(mfrow = c(2, 2))
plot(fit2)
fit3 <- lm(mpg ~ cylinders * displacement+displacement * weight, data = Auto[, 1:8])
summary(fit3)
par(mfrow = c(2, 2))
plot(log(Auto$horsepower), Auto$mpg)
plot(sqrt(Auto$horsepower), Auto$mpg)
plot((Auto$horsepower)^2, Auto$mpg)
pairs(Auto)
names(Auto)
cor(Auto[1:8])
fit2 <- lm(mpg ~ . - name, data = Auto)
summary(fit2)
par(mfrow = c(2, 2))
plot(fit2)
fit3 <- lm(mpg ~ cylinders * displacement+displacement * weight, data = Auto[, 1:8])
summary(fit3)
par(mfrow = c(2, 2))
plot(log(Auto$horsepower), Auto$mpg)
plot(sqrt(Auto$horsepower), Auto$mpg)
plot((Auto$horsepower)^2, Auto$mpg
library(MASS)
library("MASS")
library("MASS")
library(ISLR)
require(class)
library(class)
library(MASS)
library(ISLR)
library(MASS)
library(class)
summary(Weekly)
plot(Today~Lag1, col="darkred", data=Weekly)
simplelm = lm(Today~Lag1, data=Weekly)
abline(simplelm, lwd= 3, col= "darkgreen")
pairs(Weekly)
pairs(Weekly)
logmod = glm(Direction~Lag1+Lag2+Lag3+Lag4+Lag5+Volume,family = "binomial", data=Weekly)
summary(logmod)
probs = predict(logmod, type="response")
preds = rep("Down", 1089)
preds[probs > 0.5] = "Up"
table(preds, Weekly$Direction)
hist(probs, breaks= 100, col= "darkred")
abline(v = mean(probs), lwd = 2)
plot(probs, col= ifelse(Weekly$Direction=="Down", "red","green"), pch=16)
abline(h = 0.5, lwd= 3)
training.data = Weekly[Weekly$Year<2009,]
test.data = Weekly[Weekly$Year>2008,]
simpglm = glm(Direction~Lag2, data= training.data, family = "binomial")
summary(simpglm)
testprobs = predict(simpglm, type="response", newdata = test.data)
testdirs = Weekly$Direction[Weekly$Year>2008]
plot(testprobs, col= ifelse(Weekly$Direction[Weekly$Year>2008]=="Down", "red","green"), pch=16)
abline(h = 0.5, lwd= 3)
testpreds = rep("Down", 104)
testpreds[testprobs>0.5] = "Up"
mean(probs)
testpreds = rep("Down", 104)
testpreds[testprobs>0.5] = "Up"
mean(probs)
table(testpreds, testdirs)
lda.fit = lda(Direction~Lag2, data= training.data)
lda.fit
plot(lda.fit)
lda.pred = predict(lda.fit, newdata=test.data, type="response")
lda.class = lda.pred$class
table(lda.class, test.data$Direction)
qda.fit = qda(Direction~Lag2, data= training.data)
qda.fit
qda.pred = predict(qda.fit, newdata=test.data, type="response")
qda.class = qda.pred$class
table(qda.class, test.data$Direction)
set.seed(1)
train.X = cbind(training.data$Lag2)
test.X = cbind(test.data$Lag2)
train.Y = cbind(training.data$Direction)
knn.pred = knn(train.X, test.X, train.Y, k=1)
table(knn.pred, test.data$Direction)
knn3.pred = knn(train.X, test.X, train.Y, k=3)
table(knn3.pred, test.data$Direction)
qda.fit2 = qda(Direction~Lag1 + Lag2 + Lag4, data= training.data)
qda.fit2
qda.pred2 = predict(qda.fit2, newdata=test.data, type="response")
qda.class2 = qda.pred2$class
table(qda.class2, test.data$Direction)
lda.fit2 = lda(Direction~Lag1 + Lag2 + Lag4, data= training.data)
lda.fit2
lda.pred2 = predict(lda.fit2, newdata=test.data, type="response")
lda.class2 = lda.pred2$class
table(lda.class2, test.data$Direction)
qda.fit2 = qda(Direction~Lag1 + Lag2 + Lag4, data= training.data)
qda.fit2
qda.pred2 = predict(qda.fit2, newdata=test.data, type="response")
qda.class2 = qda.pred2$class
table(qda.class2, test.data$Direction)
lda.fit2 = lda(Direction~Lag1 + Lag2 + Lag4, data= training.data)
lda.fit2
lda.pred2 = predict(lda.fit2, newdata=test.data, type="response")
lda.class2 = lda.pred2$class
table(lda.class2, test.data$Direction)
getwd()
getwd()
setwd("~/Machine Learning A-Z/Part 0 - Welcome to Machine Learning A-Z/Section 1 - Welcome to Machine Learning A-Z !")
ls()
setwd("~/Machine Learning A-Z/Part 1 - Data Preprocessing/Section 2 -------------------- Part 1 - Data Preprocessing --------------------")
ls()
dataset <- read.csv("Data.csv")
View(dataset)
head(dataset)
head(dataset)
source('~/Machine Learning A-Z/Part 1 - Data Preprocessing/Section 2 -------------------- Part 1 - Data Preprocessing --------------------/data_preprocessing.r')
source('~/Machine Learning A-Z/Part 1 - Data Preprocessing/Section 2 -------------------- Part 1 - Data Preprocessing --------------------/data_preprocessing.r')
